{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1ca85495",
   "metadata": {},
   "outputs": [],
   "source": [
    "def fibonacci(num):\n",
    "    fibonacci_series=[0,1]\n",
    "    i=0\n",
    "    while i<num:\n",
    "        \n",
    "        i=fibonacci_series[-1]+fibonacci_series[-2]\n",
    "        fibonacci_series.append(i)\n",
    "    return fibonacci_series\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c232398c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0, 1, 1, 2, 3, 5, 8, 13, 21]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fibonacci(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "dc30129c",
   "metadata": {},
   "outputs": [],
   "source": [
    "def prime(num):\n",
    "    for i in num:\n",
    "        if i<2:\n",
    "            \n",
    "            return 0\n",
    "    \n",
    "    for i in num:\n",
    "        #after every iteration the count must have to be turned into 0\n",
    "        #at first i keep the count variable outside of the loop. as a result when the first number iterates \n",
    "        #through the loop and count number is 2 as it is prime.\n",
    "        #when it iterates through the 2nd number the count number was 2 and it increases as it captures the previous\n",
    "        #value of the count.So that the count must have to be 0 before checking every number\n",
    "        count=0\n",
    "        for y in range(1,i+1):\n",
    "            \n",
    "            if i%y==0:\n",
    "                count+=1\n",
    "                \n",
    "                \n",
    "            else:\n",
    "                count=count\n",
    "            \n",
    "        if count==2:\n",
    "            print(\"Prime\")\n",
    "            \n",
    "        else:\n",
    "            print(\"NOT PRIME\")\n",
    "            \n",
    "                \n",
    "            "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "692d263a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Prime\n",
      "Prime\n",
      "NOT PRIME\n",
      "NOT PRIME\n",
      "Prime\n",
      "NOT PRIME\n",
      "Prime\n"
     ]
    }
   ],
   "source": [
    "prime([3,5,9,12,13,21,23])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "fbd7785b",
   "metadata": {},
   "outputs": [],
   "source": [
    "def till_prime(num):\n",
    "    if num<2:\n",
    "        return 0\n",
    "    list_of_prime=[2]\n",
    "    x=3\n",
    "    while x<=num:\n",
    "        for y in range(3,x,2):\n",
    "            if x%y==0:\n",
    "                x+=2\n",
    "                \n",
    "                break\n",
    "        else:\n",
    "            list_of_prime.append(x)\n",
    "        x+=2\n",
    "    return list_of_prime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "28f87d4d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[2, 3, 5, 7]"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "till_prime(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "7db3f196",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "af5a1d87",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'abcdefghijklmnopqrstuvwxyz'"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "aef2c0ac",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "03dafd47",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ispangram(\"tinon turja\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e44b83c7",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
